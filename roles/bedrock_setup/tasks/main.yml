---

- name: Create Bedrock server directory
  ansible.builtin.file:
    path: "{{ bedrock_setup_homedir }}"
    state: directory
    mode: '0755'

- name: Download Bedrock server archive
  ansible.builtin.unarchive:
    src: "{{ bedrock_setup_download_url }}/{{ bedrock_setup_download_archive }}"
    dest: "{{ bedrock_setup_homedir }}"
    remote_src: true
    mode: "0640"

- name: Set bedrock_server executable
  ansible.builtin.file:
    path: "{{ bedrock_setup_homedir }}/bedrock_server"
    mode: "0755"

- name: Configure Bedrock server.properties
  ansible.builtin.lineinfile:
    path: "{{ bedrock_setup_homedir }}/server.properties"
    regexp: "^{{ item.key }}="
    line: "{{ item.key }}={{ item.value }}"
    state: present
  loop: "{{ bedrock_setup_server_props }}"
  notify: Restart Bedrock service

- name: Create permissions.json file
  ansible.builtin.template:
    src: permissions.json.j2
    dest: "{{ bedrock_setup_homedir }}/permissions.json"
    mode: "0640"
  notify:
    - Restart Bedrock service

- name: Create systemd service file for Bedrock
  ansible.builtin.template:
    src: bedrock.service.j2
    dest: /etc/systemd/system/bedrock.service
    mode: "0640"
  notify:
    - Reload systemd daemon
    - Restart Bedrock service

- name: Copy server icon
  ansible.builtin.copy:
    src: server-icon.png
    dest: "{{ bedrock_setup_homedir }}"
    mode: "0644"

- name: Ensure worlds directory exists
  ansible.builtin.file:
    path: "{{ bedrock_setup_worlddir }}"
    state: directory
    mode: '0755'

- name: Deploy all worlds
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ bedrock_setup_worlddir }}/{{ item.name }}/"
    mode: '0644'
    remote_src: false
  loop: "{{ bedrock_setup_worlds }}"
  loop_control:
    label: "{{ item.name }}"

- name: Enable Bedrock service
  ansible.builtin.systemd:
    name: bedrock
    enabled: true

- name: Flush handlers to ensure service is restarted before checking version
  ansible.builtin.meta: flush_handlers

- name: Get Bedrock start timestamp
  ansible.builtin.shell: systemctl show -p ExecMainStartTimestamp bedrock | cut -d= -f2
  register: bedrock_setup_start_time
  changed_when: false
  failed_when: bedrock_setup_start_time.stdout == ""

- name: Extract Bedrock version from latest journal entries
  ansible.builtin.shell: |
    journalctl -u bedrock --since "{{ bedrock_setup_start_time.stdout }}" \
    | grep -Eo 'Version: [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'
  register: bedrock_setup_version_output
  changed_when: false
  when: bedrock_setup_start_time.stdout != ""

- name: Parse version number
  ansible.builtin.set_fact:
    bedrock_setup_installed_version: "{{ bedrock_setup_version_output.stdout | regex_search('Version: ([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)', '\\1') }}"
  when: bedrock_setup_version_output.stdout != ""

- name: Compare extracted version to expected setup version
  ansible.builtin.fail:
    msg: >
      Bedrock version mismatch! Expected {{ bedrock_setup_version }},
      but found {{ bedrock_setup_installed_version[0] | default('none') }} in journal logs.
  when: bedrock_setup_installed_version[0] != bedrock_setup_version
