---

- name: Update pg_hba.conf to allow password access using host ip address
  community.postgresql.postgresql_pg_hba:
    dest: "/etc/postgresql/{{ postgresql_setup_version }}/main/pg_hba.conf"
    contype: host
    users: all
    source: "{{ global_ip_address }}/32"
    databases: all
    method: md5
  delegate_to: "{{ groups['pgdb'][0] }}"
  notify: Restart PostgreSQL

- name: Update pg_hba.conf to allow password access using the database host ip address
  community.postgresql.postgresql_pg_hba:
    dest: "/etc/postgresql/{{ postgresql_setup_version }}/main/pg_hba.conf"
    contype: host
    users: all
    source: "{{ grafana_setup_pg_host }}/32"
    databases: all
    method: md5
  delegate_to: "{{ groups['pgdb'][0] }}"
  notify: Restart PostgreSQL

- name: Install required packages
  ansible.builtin.apt:
    name:
      - adduser
      - libfontconfig1
      - musl
    state: present
    update_cache: true
  become: true

- name: Download and Extract Grafana
  ansible.builtin.unarchive:
    src: "{{ grafana_setup_dl_url }}"
    dest: "/opt/"
    remote_src: true
    creates: "{{ grafana_setup_install_dir }}"
    mode: "0755"

- name: Create symlink to Grafana installation
  ansible.builtin.file:
    src: "{{ grafana_setup_install_dir }}"
    dest: "/opt/grafana"
    state: link
    force: true

- name: Create Grafana data directory
  ansible.builtin.file:
    path: "{{ grafana_setup_home_dir }}"
    state: directory
    owner: grafana
    group: grafana
    mode: "0755"

- name: Create Grafana log directory
  ansible.builtin.file:
    path: "{{ grafana_setup_logs_dir }}"
    state: directory
    owner: grafana
    group: grafana
    mode: "0755"

- name: Create Grafana plugins directory
  ansible.builtin.file:
    path: "{{ grafana_setup_plugins_dir }}"
    state: directory
    owner: grafana
    group: grafana
    mode: "0755"

- name: Create Grafana pid file directory
  ansible.builtin.file:
    path: "{{ grafana_setup_pid_dir }}"
    state: directory
    owner: grafana
    group: grafana
    mode: "0750"

- name: Create Grafana provisioning directory
  ansible.builtin.file:
    path: "{{ grafana_setup_provisioning_dir }}"
    state: directory
    owner: grafana
    group: grafana
    mode: "0750"

- name: Create Grafana provisioning/plugins directory
  ansible.builtin.file:
    path: "{{ grafana_setup_provisioning_dir }}/plugins"
    state: directory
    owner: grafana
    group: grafana
    mode: "0750"

- name: Create Grafana configuration directory
  ansible.builtin.file:
    path: "{{ grafana_setup_conf_dir }}"
    state: directory
    owner: grafana
    group: grafana
    mode: "0750"

- name: Copy Grafana configuration file
  ansible.builtin.template:
    src: defaults.ini.j2
    dest: "{{ grafana_setup_config_file }}"
    owner: "{{ grafana_setup_user }}"
    group: "{{ grafana_setup_group }}"
    mode: "0640"
    backup: true

- name: Copy Grafana LDAP settings file
  ansible.builtin.template:
    src: ldap.toml.j2
    dest: "{{ grafana_setup_conf_dir }}/ldap.toml"
    owner: "{{ grafana_setup_user }}"
    group: "{{ grafana_setup_group }}"
    mode: "0640"
    backup: true
  notify: Restart Grafana

- name: Copy Grafana defaults file
  ansible.builtin.template:
    src: defaults.j2
    dest: "{{ grafana_setup_environment_file }}"
    owner: "{{ grafana_setup_user }}"
    group: "{{ grafana_setup_group }}"
    mode: "0640"
    backup: true
  notify: Restart Grafana

- name: Set ownership for Grafana directory
  ansible.builtin.file:
    path: "{{ grafana_setup_home_dir }}"
    owner: "{{ grafana_setup_user }}"
    group: "{{ grafana_setup_group }}"
    recurse: true

- name: Create Grafana systemd service file
  ansible.builtin.template:
    src: grafana-server.service.j2
    dest: "{{ grafana_setup_service_file }}"
    owner: "{{ grafana_setup_user }}"
    group: "{{ grafana_setup_group }}"
    mode: "0640"
  notify:
    - Reload systemd daemon
    - Restart Grafana

- name: Enable and start Grafana service
  ansible.builtin.systemd:
    name: grafana-server
    enabled: true
    state: started
