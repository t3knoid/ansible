---
# tasks file for webserver

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true

- name: Install nginx
  ansible.builtin.apt:
    name:
      - nginx
    state: present
    update_cache: true

- name: Add upstream block to nginx.conf
  ansible.builtin.blockinfile:
    path: /etc/nginx/nginx.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    block: |
      upstream secondary {
      {% for server in groups['secondary'] %}
        server {{ server }}:80;
      {% endfor %}
      }
    insertafter: "http {"
  when: "'primary' in group_names"
  notify: Restart nginx

- name: Ensure custom nginx folders exist
  ansible.builtin.file:
    path: "{{ nginx_folder }}"
    state: directory
    mode: "0755"
    owner: www-data
    group: www-data
  loop:
    - "{{ nginx_setup_homedir }}"
    - "{{ nginx_setup_homedir }}/log"
    - "{{ nginx_setup_homedir }}/sites-enabled"
    - "{{ nginx_setup_homedir }}/sites-available"
    - "{{ nginx_setup_letsencrypt_homedir }}"
  loop_control:
    label: "{{ nginx_folder }}"
    loop_var: nginx_folder

- name: Modify error.log path in nginx.conf
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: '^\s*error_log\s+'
    line: '\g<0> {{ nginx_setup_homedir }}/log/error.log;'
    backrefs: true
  notify: Restart nginx

- name: Modify access.log path in nginx.conf
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: '^\s*access_log\s+'
    line: '\g<0> {{ nginx_setup_homedir }}/log/access.log;'
    backrefs: true
  notify: Restart nginx

- name: Modify sites-enabled path in nginx.conf
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: '^\s*include\s+/etc/nginx/sites-enabled/\*;'
    line: '        include {{ nginx_setup_homedir }}/sites-enabled/*;'
  notify: Restart nginx

- name: Create or update Nginx site configuration
  ansible.builtin.template:
    src: site.conf.j2
    dest: "{{ nginx_setup_homedir }}/sites-available/{{ nginx_setup_site.server_name }}.conf"
    mode: "0644"
  loop: "{{ nginx_setup_sites }}"
  loop_control:
    label: "{{ nginx_setup_site.server_name }}"
    loop_var: nginx_setup_site
  notify: Restart nginx

- name: Modify primary Nginx site configuration if in load-balanced configuration
  ansible.builtin.lineinfile:
    path: "{{ nginx_setup_homedir }}/sites-available/{{ nginx_setup_site.server_name }}.conf"
    regexp: '^\s*proxy_pass\s+.*;'
    line: '        proxy_pass http://secondary;'
  loop: "{{ nginx_setup_sites }}"
  loop_control:
    label: "{{ nginx_setup_site.server_name }}"
    loop_var: nginx_setup_site
  notify: Restart nginx
  when: "'primary' in group_names"

- name: Enable Nginx site configuration
  ansible.builtin.file:
    src: "{{ nginx_setup_homedir }}/sites-available/{{ nginx_setup_site.server_name }}.conf"
    dest: "{{ nginx_setup_homedir }}/sites-enabled/{{ nginx_setup_site.server_name }}.conf"
    state: link
    force: true
  loop: "{{ nginx_setup_sites }}"
  loop_control:
    label: "{{ nginx_setup_site.server_name }}"
    loop_var: nginx_setup_site
  notify: Restart nginx

- name: Disable Nginx default site
  ansible.builtin.file:
    path: "{{ nginx_setup_homedir }}/sites-enabled/default"
    state: absent

- name: Create .htpasswd
  ansible.builtin.copy:
    content: "{{ nginx_setup_user_name }}:{{ nginx_setup_password }}"
    dest: "{{ nginx_setup_homedir }}/.htpasswd"
    owner: www-data
    group: www-data
    mode: "0644"

- name: Ensure certificate host folders exist
  ansible.builtin.file:
    path: "{{ nginx_setup_letsencrypt_homedir }}/live/{{ nginx_setup_site.server_name }}"
    state: directory
    mode: "0644"
  loop: "{{ nginx_setup_sites }}"
  loop_control:
    label: "{{ nginx_setup_site.server_name }}"
    loop_var: nginx_setup_site

- name: Check if certificate is present
  ansible.builtin.stat:
    path: "{{ nginx_setup_letsencrypt_homedir }}/live/{{ nginx_setup_site.server_name }}/cert.pem"
  register: nginx_setup_cert_pem
  loop: "{{ nginx_setup_sites }}"
  loop_control:
    label: "{{ nginx_setup_site.server_name }}"
    loop_var: nginx_setup_site

- name: Show nginx_setup_cert_pem
  debug:
    var: nginx_setup_cert_pem.results

- name: Create private keys
  community.crypto.openssl_privatekey:
    path: "{{ nginx_setup_letsencrypt_homedir }}/live/{{ nginx_setup_cert.nginx_setup_site.server_name }}/privkey.pem"
    size: 2048
    state: present
  loop: "{{ nginx_setup_cert_pem.results }}"
  when: not nginx_setup_cert.stat.exists
  loop_control:
    label: "{{ nginx_setup_cert.nginx_setup_site.server_name }}"
    loop_var: nginx_setup_cert

- name: Create self-signed certificates
  community.crypto.x509_certificate:
    path: "{{ nginx_setup_letsencrypt_homedir }}/live/{{ nginx_setup_cert.nginx_setup_site.server_name }}/cert.pem"
    privatekey_path: "{{ nginx_setup_letsencrypt_homedir }}/live/{{ nginx_setup_cert.nginx_setup_site.server_name }}/privkey.pem"
    provider: selfsigned
  loop: "{{ nginx_setup_cert_pem.results }}"
  when: not nginx_setup_cert.stat.exists
  loop_control:
    label: "{{ nginx_setup_cert.nginx_setup_site.server_name }}"
    loop_var: nginx_setup_cert

- name: Modify worker_connections in nginx.conf
  ansible.builtin.lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: '^(\s*worker_connections\s+)\d+;'
    line: '\1 {{ nginx_setup_worker_connections }};'
    backrefs: true
    backup: true
    state: present
  become: true

- name: Make sure Nginx is started
  ansible.builtin.service:
    name: nginx
    state: started
  become: true
