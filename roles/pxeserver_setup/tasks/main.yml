---

- name: Include reset_dns.yml tasks
  ansible.builtin.include_tasks: reset_dns.yml

- name: Create tftp root directory
  ansible.builtin.file:
    path: "{{ pxeserver_setup_tftp_dir }}"
    state: directory
    mode: "0755"
    owner: www-data
    group: www-data

- name: Install required packages
  ansible.builtin.apt:
    name:
      - syslinux-common
      - unzip
      - dnsmasq
    state: present

- name: Download and extract netboot tarball
  ansible.builtin.unarchive:
    src: "{{ global_os[vms_os].release_download_url }}/{{ global_os[vms_os].tarball }}"
    dest: "/tmp"
    remote_src: true
    mode: "0644"
    owner: www-data
    group: www-data
    creates: "/tmp/amd64/pxelinux.cfg"

- name: Download live server ISO
  ansible.builtin.get_url:
    url: "{{ global_os[vms_os].release_download_url }}/{{ global_os[vms_os].iso }}"
    dest: "{{ pxeserver_setup_tftp_dir }}"
    force: false
    mode: u=rw,g=rw,o=r
    owner: www-data
    group: www-data

- name: Copy netboot files to tftp root folder
  ansible.builtin.copy:
    src: "/tmp/amd64/"
    dest: "{{ pxeserver_setup_tftp_dir }}"
    directory_mode: u=rwx,g=rx,o=rx
    mode: u=rw,g=rw,o=r
    remote_src: true

- name: Find all directories
  ansible.builtin.find:
    paths: "{{ pxeserver_setup_tftp_dir }}"
    recurse: true
    file_type: directory
  register: dir_list

- name: Ensure tftp folders has proper access
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: u=rwx,g=rx,o=rx
    owner: www-data
    group: www-data
  loop: "{{ dir_list.files | json_query('[*].path') }}"

- name: Ensure tftp root directory has proper access
  ansible.builtin.file:
    path: "{{ pxeserver_setup_tftp_dir }}"
    state: directory
    mode: u=rwx,g=rx,o=rx
    owner: www-data
    group: www-data

- name: Include nginx.yml tasks
  ansible.builtin.include_tasks: nginx.yml
