---

- name: Add second cd-rom drive for cloud-init.iso 
  community.general.proxmox_disk:
    api_host: "{{ global_proxmox_api_host }}"
    api_user: "{{ global_proxmox_api_user }}"
    api_token_id: "{{ global_proxmox_api_token_id }}"
    api_token_secret: "{{ global_proxmox_api_token }}"
    api_password: "{{ global_proxmox_api_password }}"
    vmid: "{{ vms_new_vm_info.vmid | int }}"
    disk: ide0
    media: cdrom
    iso_image: "none"
    state: present
  delegate_to: localhost

- name: Generate cloud-init.iso
  ansible.builtin.import_role:
    name: vms
    tasks_from: cloud_init_iso
  run_once: true # noqa: run-once[task]

# Assumes that the iso image is located in the local storage
- name: Mount cloud-init.iso image
  community.general.proxmox_disk:
    api_host: "{{ global_proxmox_api_host }}"
    api_user: "{{ global_proxmox_api_user }}"
    api_token_id: "{{ global_proxmox_api_token_id }}"
    api_token_secret: "{{ global_proxmox_api_token }}"
    api_password: "{{ global_proxmox_api_password }}"
    vmid: "{{ vms_new_vm_info.vmid | int }}"
    disk: ide0
    media: "cdrom"
    iso_image: "local:iso/cloud-init.iso"
  delegate_to: localhost

- name: Start VM
  community.general.proxmox_kvm:
    api_host: "{{ global_proxmox_api_host }}"
    api_user: "{{ global_proxmox_api_user }}"
    api_password: "{{ global_proxmox_api_password }}"
    node: "{{ vms_proxmox_node }}"
    vmid: "{{ vms_new_vm_info.vmid | int }}"
    state: started
  delegate_to: localhost

- name: Wait two minutes for Continue with autoinstall? prompt
  ansible.builtin.pause:
    minutes: 2

- name: Generate Python script to send 'yes' to VM console
  ansible.builtin.template:
    src: send_yes_to_vm_console.py.j2
    dest: /tmp/send_yes_to_vm_console.py
    mode: '0755'
  register: python_script_generated
  delegate_to: localhost
  notify:
    - Make the Python script executable

- name: Execute Python script
  ansible.builtin.script: /tmp/send_yes_to_vm_console.py
  args:
    executable: python3
  delegate_to: localhost

- name: Wait for VM to fully start by trying to get it's IP address
  ansible.builtin.uri:
    url: 'https://{{ global_proxmox_api_host }}:8006/api2/json/nodes/{{ vms_proxmox_node }}/qemu/{{ vms_new_vm_info.vmid | int }}/agent/network-get-interfaces'
    method: GET
    headers:
      Authorization: "PVEAPIToken={{ global_proxmox_api_user }}!{{ global_proxmox_api_token_id }}={{ global_proxmox_api_token }}"
    follow_redirects: safe
    validate_certs: false
  retries: 30
  delay: 30
  until: result.status == 200
  register: result
  delegate_to: localhost

- name: Remove existing known_host entry
  ansible.builtin.known_hosts:
    name: "{{ ip_address }}"
    path: ~/.ssh/known_hosts
    state: absent
  delegate_to: localhost
  
- name: Update ~/.ssh/known_hosts
  ansible.builtin.known_hosts:
    name: "{{ ip_address }}"
    key: "{{ lookup('pipe', 'ssh-keyscan -t rsa {{ ip_address }}') }}"
    path: ~/.ssh/known_hosts
    state: present
  delegate_to: localhost
