---

- name: Import global role
  ansible.builtin.import_role:
    name: global

- name: Get a list of vms
  ansible.builtin.uri:
    url: 'https://{{ global_proxmox_api_host }}:8006/api2/json/cluster/resources?type=vm'
    method: GET
    headers:
      Authorization: "PVEAPIToken={{ global_proxmox_api_user }}!{{ global_proxmox_api_token_id }}={{ global_proxmox_api_token }}"
    follow_redirects: safe
    validate_certs: false
  register: vms_vm_list
  delegate_to: localhost

- name: Get node where virtual machine template is located
  ansible.builtin.set_fact:
    vms_proxmox_template: "{{ item }}"
  with_items: "{{ vms_vm_list.json.data }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.name == global_os[vms_os].template

- name: Show vms_proxmox_template
  ansible.builtin.debug:
    var: vms_proxmox_template

- name: Fail if template does not exist
  ansible.builtin.fail:
    msg: "Template was not found in the Proxmox cluster. Exiting."
  when: vms_proxmox_template is not defined

# This ensures that the current Ansible user can
# connect via ssh into the new virtual machine
- name: Generate Ansible user ssh key if needed
  community.crypto.openssh_keypair:
    path: ~/.ssh/id_rsa
  delegate_to: localhost
  register: vms_sshkey

# https://pve.proxmox.com/wiki/Storage:_Directory
- name: Make sure /var/lib/vz/snippets folder exists
  ansible.builtin.file:
    path: "/var/lib/vz/snippets"
    state: directory
  become: true
  delegate_to: "{{ vms_proxmox_template.node }}"

- name: Copy user cloud-init file
  template:
    src: user-data-ci.j2
    dest: "/var/lib/vz/snippets/{{ inventory_hostname }}-user-data-ci.yml"
  become: true
  delegate_to: "{{ vms_proxmox_template.node }}"

- name: Copy network cloud-init file
  template:
    src: network-data-ci.j2
    dest: "/var/lib/vz/snippets/{{ inventory_hostname }}-network-data-ci.yml"
    become: true
  delegate_to: "{{ vms_proxmox_template.node }}"

- name: Clone Ubuntu 24.04 template
  community.general.proxmox_kvm:
    api_host: "{{ global_proxmox_api_host }}"
    api_user: "{{ global_proxmox_api_user }}"
    api_password: "{{ global_proxmox_api_password }}"
    node: "{{ vms_proxmox_template.node }}"
    name: "{{ vms_name | default(inventory_hostname) }}"
    clone: "{{ vms_proxmox_template.name }}"
    full: true
    storage: "{{ vms_config.storage }}"
    timeout: 1000
    ostype: "{{ vms_config.ostype }}"
    state: present
  delegate_to: localhost
  register: vms_vm_info

- name: Update Ubuntu 24.04 template
  community.general.proxmox_kvm:
    api_host: "{{ global_proxmox_api_host }}"
    api_user: "{{ global_proxmox_api_user }}"
    api_password: "{{ global_proxmox_api_password }}"
    vmid: "{{ vms_vm_info.vmid }}"
    node: "{{ vms_proxmox_template.node }}"
    timeout: 1000
    cores: "{{ vms_config.cores }}"
    sockets: "{{ vms_config.sockets }}"
    memory: "{{ vms_config.memory }}"
    cpu: "{{ vms_config.cpu }}"
    ostype: "{{ vms_config.ostype }}"
    bootdisk: scsi0
    serial:
      serial0: socket
    vga: serial0
    net:
      net0: "virtio,bridge=vmbr0"
    update: true
    cicustom: "user=local:snippets/{{ inventory_hostname }}-user-data-ci.yml,network=local:snippets/{{ inventory_hostname }}-network-data-ci.yml"
    citype: nocloud
  delegate_to: localhost
  register: vms_vm_info

- name: Show vms_vm_info
  ansible.builtin.debug:
    var: vms_vm_info

- name: Add second disk
  community.general.proxmox_disk:
    api_host: "{{ global_proxmox_api_host }}"
    api_user: "{{ global_proxmox_api_user }}"
    api_token_id: "{{ global_proxmox_api_token_id }}"
    api_token_secret: "{{ global_proxmox_api_token }}"
    api_password: "{{ global_proxmox_api_password }}"
    vmid: "{{ vms_vm_info.vmid }}"
    disk: virtio1
    backup: "{{ vms_config.disk2.backup | default(true) }}"
    cache: none
    storage: "{{ vms_config.disk2.storage | default(local_thin) }}"
    size: "{{ vms_config.disk2.size | default(20) }}"
    state: present
  delegate_to: localhost
  when: vms_config.disk2 is defined

- name: Get a list of vms
  ansible.builtin.uri:
    url: 'https://{{ global_proxmox_api_host }}:8006/api2/json/cluster/resources?type=vm'
    method: GET
    headers:
      Authorization: "PVEAPIToken={{ global_proxmox_api_user }}!{{ global_proxmox_api_token_id }}={{ global_proxmox_api_token }}"
    follow_redirects: safe
    validate_certs: false
  register: vms_vm_list
  delegate_to: localhost

- name: Get node where new virtual machine is located using vmid
  ansible.builtin.set_fact:
    vms_vm_node: "{{ item.node }}"
  with_items: "{{ vms_vm_list.json.data }}"
  loop_control:
    label: "{{ item.vmid }}"
  when: item.vmid == (vms_vm_info.vmid | int)

- name: Migrate new image to target node
  community.general.proxmox_kvm:
    api_host: "{{ global_proxmox_api_host }}"
    api_user: "{{ global_proxmox_api_user }}"
    api_password: "{{ global_proxmox_api_password }}"
    node: "{{ vms_proxmox_node }}"
    vmid: "{{ vms_vm_info.vmid }}"
    migrate: true
    state: present
  delegate_to: localhost

- name: Start virtual machine
  ansible.builtin.include_tasks: "start.yml"

- name: Wait for virtual machine to be ready
  ansible.builtin.wait_for:
    port: 22
    host: "{{ global_ip_address }}"
    delay: 15
    timeout: 60
  delegate_to: localhost

- name: Update known_hosts file
  ansible.builtin.include_tasks: "known_hosts.yml"
