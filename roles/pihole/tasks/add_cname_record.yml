---

- name: Include get_pihole_sid.yml tasks
  ansible.builtin.include_tasks: get_pihole_sid.yml

- name: Format each cname entries and URL-encode them
  ansible.builtin.set_fact:
    pihole_cname_entries_encoded: "{{ pihole_cname_entries_encoded | default([]) + [(item.domain ~ ',' ~ item.target) | urlencode() ] }}"
  loop: "{{ pihole_cname_entries }}"

- name: Add cname record using Pi-hole config/dns/cnameRecords api
  no_log: false
  ansible.builtin.uri:
    url: "http://{{ pihole_api_host }}/api/config/dns/cnameRecords/{{ item }}"
    method: PUT
    headers:
      sid: "{{ pihole_sid }}"
    return_content: true
    status_code: [-1, 201, 400]
  register: result_cname_op
  delegate_to: localhost
  loop: "{{ pihole_cname_entries_encoded }}"
  loop_control:
    pause: 5 # In order not to overwhelm the API
  changed_when: result_cname_op.status ==  201

- name: Store error message if operation is not successful
  ansible.builtin.set_fact:
    pihole_error_msg: "{{ pihole_error_msg | default([]) + [{result_cname.item.split('%2C')[0]: result_cname.json.error.message}] }}"
  when: result_cname.status != 201 and result_cname.json.error is defined
  loop: "{{ result_cname_op.results }}"
  loop_control:
    label: "{{ result_cname.item }}"
    loop_var: result_cname

- name: Store message if operation is not successful
  ansible.builtin.set_fact:
    pihole_error_msg: "{{ pihole_error_msg | default([]) + [{result_cname.item.split('%2C')[0]: result_cname.msg}] }}"
  when: result_cname.status != 201 and result_cname.json.error is not defined
  loop: "{{ result_cname_op.results }}"
  loop_control:
    label: "{{ result_cname.item }}"
    loop_var: result_cname

- name: Include delete_session_id.yml tasks
  ansible.builtin.include_tasks: delete_session_id.yml

- name: Show cname operation failure
  ansible.builtin.debug:
    var: pihole_error_msg
  when: pihole_error_msg is defined
