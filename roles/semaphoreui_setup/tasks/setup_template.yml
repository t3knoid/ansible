---

- name: Initialize vaults
  ansible.builtin.set_fact:
    vaults: []

# vault_key_id: finds the first item in existing_keys where name == credential_name, extracts its id, and converts it to an integer.
# name: assigns the current credential_name to the vault entry.
# type: extracts the type of the matching credential. If it's 'login_password', it sets the vault type to 'password'. Otherwise, it uses the original type value.
- name: Create a vault object for each credential assigned to the task template
  ansible.builtin.set_fact:
    vaults: "{{ vaults + [ {
      'vault_key_id': (existing_keys | selectattr('name', 'equalto', credential_name ) | map(attribute='id') | first | int),
      'name': credential_name,
      'type': (
        ((existing_keys | selectattr('name', 'equalto', credential_name ) | map(attribute='type') | first | string) == 'login_password')
        | ternary('password', (existing_keys | selectattr('name', 'equalto', credential_name ) | map(attribute='type') | first | string))
      )
      } ] }}"
  loop: "{{ project_template_to_add.credentials }}"
  loop_control:
    label: "{{ credential_name }}"
    loop_var: credential_name
  when: project_template_to_add.credentials is defined and (project_template_to_add.credentials | default([])  | length > 0)

- name: Get the repository id
  ansible.builtin.set_fact:
    repository_id: "{{ (existing_repos | selectattr('name', 'equalto', project_template_to_add.repository) ) | map(attribute='id') | first }}"
  when: project_template_to_add.repository is defined and (project_template_to_add.repository | default([])  | length > 0)

- name: Get the inventory id
  ansible.builtin.set_fact:
    inventory_id: "{{ (existing_inventories | selectattr('name', 'equalto', project_template_to_add.inventory) ) | map(attribute='id') | first }}"
  when: project_template_to_add.inventory is defined and (project_template_to_add.inventory | default([])  | length > 0)

- name: Get the view id
  ansible.builtin.set_fact:
    view_id: "{{ (existing_views | selectattr('title', 'equalto', project_template_to_add.view) ) | map(attribute='id') | first }}"
  when: project_template_to_add.view is defined and (project_template_to_add.view | default([])  | length > 0)

- name: Get the environment id
  ansible.builtin.set_fact:
    environment_id: "{{ (existing_environments | selectattr('name', 'equalto', project_template_to_add.environment) ) | map(attribute='id') | first }}"
  when: project_template_to_add.environment is defined and (project_template_to_add.environment | default([])  | length > 0)

- name: Extract task template metadata and create new payload for api body
  set_fact:
    template_api_body_payload: >-
      {{
        project_template_to_add |
        dict2items |
        rejectattr('key', 'in', ['credentials','sudo_credentials','inventory','view','repository','environment']) |
        items2dict 
      }}

- name: Parse existing template names
  ansible.builtin.set_fact:
    existing_template_names: >-
      {{
        existing_templates | map(attribute='name') | list
      }}

- name: Create task template {{ project_template_to_add.name }} if not already present
  ansible.builtin.uri:
    url: "{{ semaphoreui_setup_api_base }}/project/{{ selected_project_id }}/templates"
    method: POST
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: "Bearer {{ semaphoreui_setup_api_token }}"
    body_format: json
    body: >-
      {{
        template_api_body_payload
        | combine({ 'project_id': selected_project_id | int })
        | combine({ 'inventory_id': inventory_id | int })
        | combine({ 'repository_id': repository_id | int })
        | combine({ 'environment_id': environment_id | int })
        | combine({ 'view_id': view_id | int })
        | combine({ 'vaults': vaults })
      }}
    status_code: 201
  when: project_template_to_add.name not in existing_template_names
