---

- name: Stop Docker Container
  ansible.builtin.command: docker-compose -f "{{ lidarr_setup_config_dir }}/docker-compose.yml" down
  changed_when: false

- name: Create config folder
  ansible.builtin.file:
    path: "{{ lidarr_setup_config_dir }}"
    owner: "{{ users_list[0].username }}"
    group: "{{ users_list[0].username }}"
    mode: "0755"
    state: directory

- name: Verify config folder exists
  ansible.builtin.stat:
    path: "{{ lidarr_setup_config_dir }}"
  register: lidarr_setup_config_dir_stat

- name: Fail if config folder does not exists
  ansible.builtin.fail:
    msg: "{{ lidarr_setup_config_dir }}"
  when: lidarr_setup_config_dir_stat is not defined

- name: Remove existing Lidarr Backups folder
  ansible.builtin.file:
    path: "{{ lidarr_setup_backups_dir }}"
    state: absent

# This assumes that an nfs share has been mounted at /nfs/backups
- name: Create network lidarr backup folder
  ansible.builtin.file:
    path: "/nfs/backups/lidarr"
    owner: "{{ users_list[0].username }}"
    group: "{{ users_list[0].username }}"
    mode: "0777"
    state: directory

# This assumes that an nfs share has been mounted at /nfs/backups
- name: Create a /config/Backups link to Lidarr network backup folder
  ansible.builtin.file:
    path: "{{ lidarr_setup_backups_dir }}"
    src: /backups/lidarr
    owner: "{{ users_list[0].username }}"
    group: "{{ users_list[0].username }}"
    force: true
    state: link

- name: Copy config.yml to target machine
  ansible.builtin.template:
    src: config.xml.j2
    dest: "{{ lidarr_setup_config_dir }}/config.xml"
    mode: "0640"

- name: Copy docker-compose.yml to target machine
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ lidarr_setup_config_dir }}/docker-compose.yml"
    mode: "0640"

- name: Make sure docker service account has access to config dir
  ansible.builtin.file:
    path: "{{ lidarr_setup_config_dir }}"
    owner: "{{ users_list[0].username }}"
    group: "{{ users_list[0].username }}"
    mode: "0755"
    recurse: true

- name: Prune unused Docker images
  ansible.builtin.command: docker image prune -f
  changed_when: false

- name: Remove all images
  ansible.builtin.shell: "docker rmi -f $(docker images -a -q)"
  changed_when: false
  ignore_errors: true

- name: Pull latest image
  ansible.builtin.command: docker-compose -f "{{ lidarr_setup_config_dir }}/docker-compose.yml" pull
  changed_when: false

- name: Run Docker Container
  ansible.builtin.command: docker-compose -f "{{ lidarr_setup_config_dir }}/docker-compose.yml" up -d
  changed_when: false
